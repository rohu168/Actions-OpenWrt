#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Build OpenWrt

on:
  repository_dispatch:
  release:
    types: published
#  push:
#    branches: 
#      - master
#    paths:
#      - '.config'
# # 国际标准时间定时编译 +8是北京时间
  schedule:
    - cron: 0 18 * * *
  watch:
    types: started 


env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: seed-r20.3.19-20200405-withouDocker.config
  DIY_SH: diy.sh
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  TZ: Asia/Shanghai
  UPLOAD_TO_N1: true
  # 注意设【AUTORSETOP】为true,【UPLOAD_TO_N1】也要为true
  AUTORSETOP: true
  SENDMSG: true

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo swapoff /swapfile
        sudo rm -rf /swapfile /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        curl -fsSL https://raw.githubusercontent.com/P3TERX/dotfiles/master/.bashrc >> ~/.bashrc

    - name: Clone source code
      run: git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

    #- name: Update feeds
    #  run: cd openwrt && ./scripts/feeds update -a

    #- name: Install feeds
    #  run: cd openwrt && ./scripts/feeds install -a
    
    - name: Update and install feeds passwall
      run: |
        chmod +x passwall.sh && cp passwall.sh ./openwrt && cd openwrt && ./passwall.sh

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e "config/$CONFIG_FILE" ] && mv config/$CONFIG_FILE openwrt/.config
        chmod +x $DIY_SH
        cd openwrt
        ../$DIY_SH

    - name: SSH connection to Actions
      uses: P3TERX/debugger-action@master
      if: env.SSH_ACTIONS == 'true' || contains(github.event.action, 'ssh')

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        echo "::set-output name=status::success"

    - name: Upload bin directory
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        md5sum openwrt-armvirt-64-default-rootfs.tar.gz > openwrt-armvirt-64-default-rootfs.tar.gz.md5
        echo "::set-env name=FIRMWARE::$PWD"
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 99 -t 3 --hash --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"

    - name: Upload firmware to WeTransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        
    # - name: 更改固件包名
    #   id: changename
    #   run: |
    #     cd openwrt/bin/targets/*/*
    #     targz="Auto$((10#$(date +"%m%d")))v$((10#$(date +"%H")+8))-op.tar.gz"
    #     mv openwrt-armvirt-64-default-rootfs.tar.gz  ${targz}
    #     echo "::set-env name=FIRMWARENAME::${{ env.FIRMWARE }}/${targz}"
    #     echo "::set-output name=status::success"

    - name: 上传固件到N1
      if: env.UPLOAD_TO_N1 == 'true' && steps.organize.outputs.status == 'success' && !cancelled()
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        # rm: 1 # 上传前先清空目录
        source: "openwrt/bin/targets/*/*/*.tar.gz,openwrt/bin/targets/*/*/*.tar.gz.md5"
        target: "ccx"
        strip_components: 5

    - name: 自动更新N1固件
      if: env.UPLOAD_TO_N1 == 'true' && env.AUTORSETOP == 'true' && success()
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        script: cd ccx && (bash autoRsetOP.sh &)

    - name: Sending message
      if: env.UPLOAD_TO_N1 == 'false' && env.SENDMSG == 'true'
      uses: yakumioto/serverchan-action@v1
      with:
        key: ${{ secrets.SCKEY }}
        text: 固件编译完成！
        desp: 源码:${{ env.REPO_URL }}

    - name: Sending message
      if: env.UPLOAD_TO_N1 == 'true' && env.AUTORSETOP == 'false' && env.SENDMSG == 'true'
      uses: yakumioto/serverchan-action@v1
      with:
        key: ${{ secrets.SCKEY }}
        text: 固件上传到N1完成！
        desp: 源码:${{ env.REPO_URL }}

    - name: Sending message
      if: env.UPLOAD_TO_N1 == 'true' &&　env.AUTORSETOP == 'true' && env.SENDMSG == 'true'
      uses: yakumioto/serverchan-action@v1
      with:
        key: ${{ secrets.SCKEY }}
        text: 自动更新N1固件完成！
        desp: 源码:${{ env.REPO_URL }}



    # - name: WeChat notification
    #   if: env.WECHAT == 'true'
    #   run: curl https://sc.ftqq.com/${{ secrets.SCKEY }}.send?text=自动更新N1固件成功！&desp=源码:${env.REPO_URL}

